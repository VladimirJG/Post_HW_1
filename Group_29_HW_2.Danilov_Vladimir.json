{
	"info": {
		"_postman_id": "1e93e063-a546-46a0-a940-fc5843e4089d",
		"name": "HW_2",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Отправить запрос.\r",
							"// 2. Статус код 200\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// 3. Проверить, что в body приходит правильный string\r",
							"\r",
							"pm.test(\"Body is correct\", function () {\r",
							"    pm.response.to.have.body(\"This is the first responce from server!ss\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": []
				},
				"url": {
					"raw": "http://162.55.220.72:5007/first",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5007",
					"path": [
						"first"
					]
				}
			},
			"response": []
		},
		{
			"name": "2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//2 Статус код 200 \r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//3 Спарсить response body в json\r",
							"\r",
							"    let jsonData = pm.response.json();\r",
							"\r",
							"//4 Проверить, что name в ответе равно name s request\r",
							"\r",
							"\r",
							"    let name = jsonData.name\r",
							"\r",
							"pm.test(\"name\", function () {\r",
							"    pm.expect(name).to.eql(\"Vladimir\");\r",
							"});\r",
							"\r",
							"//5 Проверить, что age в ответе равно age s request\r",
							"\r",
							"let age = jsonData.age\r",
							"\r",
							"pm.test(\"age\", function () {\r",
							"    pm.expect(age).to.eql(\"36\");\r",
							"});\r",
							"\r",
							"//6. Проверить, что salary в ответе равно salary s request\r",
							"\r",
							"let salary = jsonData.salary\r",
							"\r",
							"pm.test(\"salary\", function () {\r",
							"    pm.expect(salary).to.eql(5000);\r",
							"});\r",
							"\r",
							"//7. Спарсить request.\r",
							"\r",
							"let req = request.data\r",
							"\r",
							"//8. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"\r",
							"let req_name = req.name\r",
							"let resp_name = jsonData.name\r",
							"\r",
							"pm.test(\"req_name\", function () {\r",
							"    pm.expect(resp_name).to.eql(req_name);\r",
							"});\r",
							"\r",
							"//9. Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"\r",
							"let req_age = req.age\r",
							"let resp_age = jsonData.age\r",
							"\r",
							"pm.test(\"req_age\", function () {\r",
							"    pm.expect(resp_age).to.eql(req_age);\r",
							"})\r",
							"\r",
							"//10. Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"\r",
							"let req_salary =  req.salary\r",
							"req_salary = Number(req_salary)\r",
							"let resp_salary = jsonData.salary\r",
							"\r",
							"pm.test(\"req_salary\", function () {\r",
							"    pm.expect(resp_salary).to.eql(req_salary);\r",
							"});\r",
							"\r",
							"//11. Вывести в консоль параметр family из response.\r",
							"\r",
							"console.log(jsonData.family)\r",
							"console.log(jsonData.family.children[0][0],jsonData.family.children[0][1],jsonData.family.children[1][0],jsonData.family.children[1][1])\r",
							"console.log(jsonData.family.u_salary_1_5_year)\r",
							"\r",
							"//12. Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)\r",
							"\r",
							"let resp_u_salary_1_5_year = jsonData.family.u_salary_1_5_year\r",
							"let req_salary_15 = req.salary * 4\r",
							"\r",
							"pm.test(\"Your test name\", function () {\r",
							"    pm.expect(resp_u_salary_1_5_year).to.eql(req_salary_15);\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Vladimir",
							"type": "text"
						},
						{
							"key": "age",
							"value": "36",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "5000",
							"type": "text"
						},
						{
							"key": "token",
							"value": "\"/s34lfgbj/jkfjkfjn/jjd909/77289kjkWpqc1477hkjvlndj870656evny\"",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5007/user_info_3",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5007",
					"path": [
						"user_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "Vladimir",
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "3",
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_3",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_3"
					]
				}
			},
			"response": []
		}
	]
}